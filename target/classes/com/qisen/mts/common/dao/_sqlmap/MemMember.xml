<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.qisen.mts.common.dao.mem.MemberDao">
	<insert id="create" parameterType="com.qisen.mts.common.model.entity.mem.Member">
		<selectKey resultType="java.lang.Integer" order="BEFORE" keyProperty="id">  
			select seq_mem_member.nextval as id from dual
		</selectKey>
		<![CDATA[
			insert into mem_member(id,eid,sid,name,mobile,sex,birthday,img,consumetimes,remark,typeno,cashpwd,lastconsumetime,status,inputdate) values 
			(#{id},#{eid},#{sid},#{name},#{mobile},#{sex}, #{birthDay} ,#{img},nvl(#{consumeTimes,jdbcType=INTEGER},0),#{remark},#{typeNo},#{cashPwd},#{lastConsumeTime},1, to_date(to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd  hh24:mi:ss') )
		]]>
	</insert>
	<insert id="importMember" parameterType="com.qisen.mts.common.model.entity.mem.Member">
		<selectKey resultType="java.lang.Integer" order="BEFORE" keyProperty="id">  
			select seq_mem_member.nextval as id from dual
		</selectKey>
		<![CDATA[
			insert into mem_member(id,eid,sid,name,mobile,sex,birthday,consumetimes,remark,typeno,cashpwd,status,inputdate) values 
			(#{id},#{eid},#{sid},#{name},#{mobile},#{sex}, #{birthDay} ,0,#{remark},#{typeNo},#{cashPwd},1, #{inputDate})
		]]>
	</insert>
	<delete id="delete" parameterType="int">
		<![CDATA[
			delete from mem_member where id = #{id}
		]]>
	</delete>

	<update id="update" parameterType="com.qisen.mts.common.model.entity.mem.Member">
		<![CDATA[
			update mem_member
		]]>
		<trim prefix="SET" suffixOverrides="," suffix="WHERE id = #{id}" >
			<if test="name != null and name != '' ">
				<![CDATA[
					 name = #{name},
				]]>
			</if>
			<if test="mobile != null and mobile != '' ">
				<![CDATA[
					mobile = #{mobile},
				]]>
			</if>
			<if test="sex != null and sex != '' ">
				<![CDATA[
					sex = #{sex},
				]]>
			</if>
			<if test="birthDay != null ">
				<![CDATA[
					birthday = #{birthDay},
				]]>
			</if>
			<if test="img != null and img != '' ">
				<![CDATA[
					img = #{img},
				]]>
			</if>
			<if test="remark != null ">
				<![CDATA[
					remark = #{remark},
				]]>
			</if>
			<if test="loginPwd != null and loginPwd != '' ">
				<![CDATA[
					loginpwd = #{loginPwd},
				]]>
			</if>
			<if test="typeNo != null and typeNo != '' ">
				<![CDATA[
					typeno = #{typeNo},
				]]>
			</if>
		</trim>
	</update>

	<update id="update4FirstConsume">
		<![CDATA[
			update mem_member
			set firstconsumetime = #{bday}
			where eid = #{eid} and id = #{id} and nvl(consumetimes,0) = 0
		]]>
	</update>

	<update id="rollback4FirstConsume">
		<![CDATA[
			update mem_member
			set firstconsumetime = null
			where eid = #{eid} and id = #{id} and nvl(consumetimes,0) - 1 = 0
		]]>
	</update>

	<update id="updateConsumeInfo">
		<![CDATA[
			update mem_member
			set consumefee = nvl(consumefee,0) + #{fee},
				lastconsumetime = #{bday},
		]]>
		<choose>
			<when test="rollback == 0">
				consumetimes = nvl(consumetimes,0) + 1
			</when>
			<otherwise>
				consumetimes = nvl(consumetimes,0) - 1
			</otherwise>
		</choose>
		<if test="lastEmp != null">
			,lastemp = #{lastEmp}
		</if>
		<![CDATA[
			where eid = #{eid} and id = #{id}
		]]>
	</update>
	
	<select id="find4Login" resultType="com.qisen.mts.common.model.entity.mem.Member">
		<![CDATA[
			select id,eid,sid,name,mobile,sex,birthday,img,consumetimes,consumefee,lastemp,remark,typeno,cashpwd,loginpwd,authtoken,firstconsumetime,lastconsumetime,status,inputdate from mem_member where mobile = #{mobile} and loginPwd = #{loginPwd}
		]]>
	</select>
	
	<select id="findByToken" resultType="com.qisen.mts.common.model.entity.mem.Member">
		<![CDATA[
			select id,eid,sid,name,mobile,sex,birthday,img,consumetimes,consumefee,lastemp,remark,typeno,cashpwd,loginpwd,authtoken,firstconsumetime,lastconsumetime,status,inputdate from mem_member where authtoken = #{token}
		]]>
	</select>
	
	<update id="update4Login">
		<![CDATA[
			update mem_member set lastlogin = sysdate,authtoken = #{token} where id = #{id}
		]]>
	</update>
	
	<select id="count" parameterType="com.qisen.mts.common.model.request.PageRequest"
		resultType="int">
		<![CDATA[
			select count(id) from mem_member 
			 
		]]>
		<where>
			<![CDATA[
				 status= #{body.status} and eid = #{eid}
			]]>
			<foreach collection="body.sid" item="sid" index="index"  open="and ("  close=")" separator="or">
				sid = #{sid}
			</foreach>
			<if test="body.key != null and body.key != '' ">
				<![CDATA[
					 and (name like '%'||#{body.key}||'%'  or mobile like '%'||#{body.key}||'%' )
				]]>
			</if>
		</where>
	</select>

	<select id="list" resultType="com.qisen.mts.common.model.entity.mem.Member"
		parameterType="com.qisen.mts.common.model.request.PageRequest">
		<![CDATA[
			select * from(
			select m.*,rownum rnum from(
			select a.*, decode(a.consumetimes,0,0,a.sumConsumeFee/a.consumetimes) as unitprice from
			(select id,eid,sid,name,mobile,sex,birthday,img,consumetimes,consumefee sumConsumeFee,remark,typeno,cashpwd,firstconsumetime,lastconsumetime,status,inputdate,lastemp from mem_member )a
		]]>
		<where>
			<![CDATA[
				 a.status= #{body.status} and a.eid = #{eid}
			]]>
			<foreach collection="body.sid" item="sid" index="index"  open="and ("  close=")" separator="or">
				a.sid = #{sid}
			</foreach>
			<if test="body.key != null and body.key != '' ">
				<![CDATA[
					 and (a.name like '%'||#{body.key}||'%'  or a.mobile like '%'||#{body.key}||'%' )
				]]>
			</if>
			<![CDATA[
				 ORDER BY a.sid,a.id desc)m) 
			]]>
		</where>
		<if test="startIndex != 0  and endIndex != 0">
			<![CDATA[
				 where rnum between #{startIndex} and #{endIndex}
			]]>
		</if>
	</select>

	<select id="find" parameterType="int"
		resultType="com.qisen.mts.common.model.entity.mem.Member">
		<![CDATA[
			select id,eid,sid,name,mobile,sex,birthday,img,consumetimes,remark,typeno,cashpwd,lastconsumetime,status,inputdate from mem_member where eid = #{eid} and id = #{id}
		]]>
	</select>

	<select id="check" resultType="int"
		parameterType="com.qisen.mts.common.model.entity.mem.Member">
		<![CDATA[
			select count(id) from mem_member 
		]]>
		<where>
			<![CDATA[
				sid = #{sid} and status='1'
			]]>
			<if test="mobile != null and mobile != '' ">
				<![CDATA[
					 and mobile = #{mobile} 
				]]>
			</if>
			
		</where>
	</select>

	<update id="updatestatus" parameterType="com.qisen.mts.common.model.request.BaseRequest">
		<![CDATA[
			update mem_member
		]]>
		<set>
			<![CDATA[
				status = #{body.status}
			]]>
		</set>
		<![CDATA[
			where eid=#{eid} and id=#{body.id}
		]]>
	</update>
</mapper>
